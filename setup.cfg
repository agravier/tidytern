[flake8]

max-line-length = 80


[tool:pytest]

# If a pytest section is found in one of the possible config files
# (pytest.ini, tox.ini or setup.cfg), then pytest will not look for any others,
# so if you add a pytest config section elsewhere,
# you will need to delete this section from setup.cfg.

norecursedirs =
    migrations

python_files =
    test_*.py
    *_test.py
    tests.py

addopts =
    -ra
    --strict
    --doctest-modules
    --doctest-glob=\*.rst
    --tb=short
    --pyargs

testpaths =
    tidytern
    tests/

# The order of these options matters. testpaths comes after addopts so that
# tidytern in testpaths is interpreted as
# --pyargs tidytern.
# Any tests in the src/ directory (that is, tests installed with the package)
# can be run by any user with pytest --pyargs tidytern.
# Packages that are sensitive to the host machine, most famously NumPy,
# include tests with the installed package so that any user can check
# at any time that everything is working properly.
# If you do choose to make installable tests, this will run the installed
# tests as they are actually installed (same principle as when we ensure that
# we always test the installed version of the package).
# If you have no need for this (and your src/ directory is very large),
# you can save a few milliseconds on testing by telling pytest not to search
# the src/ directory by removing
# --pyargs and tidytern from the options here.


[tool:isort]

force_single_line = True
line_length = 80
known_first_party = tidytern
default_section = THIRDPARTY
forced_separate = test_tidytern
not_skip = __init__.py


[matrix]

# This is the configuration for the `./bootstrap.py` script.
# It generates `.travis.yml`, `tox.ini` and `.appveyor.yml`.
#
# Syntax: [alias:] value [!variable[glob]] [&variable[glob]]
#
# alias:
#  - is used to generate the tox environment
#  - it's optional
#  - if not present the alias will be computed from the `value`
# value:
#  - a value of "-" means empty
# !variable[glob]:
#  - exclude the combination of the current `value` with
#    any value matching the `glob` in `variable`
#  - can use as many you want
# &variable[glob]:
#  - only include the combination of the current `value`
#    when there's a value matching `glob` in `variable`
#  - can use as many you want

python_versions =
    py37
    py38

dependencies =
#    1.4: Django==1.4.16 !python_versions[py3*]
#    1.5: Django==1.5.11
#    1.6: Django==1.6.8
#    1.7: Django==1.7.1 !python_versions[py26]
# Deps commented above are provided as examples. That's what you would use in a Django project.

environment_variables =
    -
